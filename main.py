# from math import pi
# import decimal
#
#
# class Circle:
#     def __init__(self, radius: float):
#         self.radius: float = radius
#         self.__circle_long: (decimal, None) = None
#         self.__area: (decimal, None) = None
#
#     @property
#     def radius(self):
#         return self._radius
#
#     @radius.setter
#     def radius(self, radius: float):
#         self._radius = radius
#
#     @property
#     def circle_long(self) -> decimal:
#         if self.__circle_long is None:
#             self.__circle_long = decimal.Decimal(pi * self.radius * 2)
#         return self.__circle_long
#
#     @property
#     def area(self) -> decimal:
#         if self.__area is None:
#             self.__area = decimal.Decimal(pi * pow(self.radius, 2))
#         return self.__area
#
#
# if __name__ == '__main__':
#     new_circle = Circle(12)
#     print(new_circle.circle_long)
# #     print(new_circle.area)
# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫. üìå–ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞. üìå–£ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –º–µ—Ç–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä –∏ –ø–ª–æ—â–∞–¥—å. üìå–ï—Å–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É –Ω–∞—Å –∫–≤–∞–¥—Ä–∞—Ç.
import random
#
#
# class Square:
#     def __init__(self,lenght,width = None):
#         self.length = lenght
#         if width:
#             self.widht = width
#         else:
#             self.widht = lenght
#
#     def square(self):
#             return self.length * self.length
#
#     def perimetr(self):
#         return  (self.length * self.length) * 2
#
# square1 = Square(2)
#
# print(square1.square())
# print(square1.perimetr())
#
# üìå–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ: –§–ò–û, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ç.–ø. –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä. üìå–£ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ç–æ–¥—ã birthday –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞ –≥–æ–¥, full_name –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ –§–ò–û –∏ —Ç.–ø. –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä. üìå–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç.
#
#
# class Person:
#     def __init__(self,first_name,second_name,last_name,phone,age):
#         self.first_name =first_name
#         self.second_name = second_name
#         self.last_name = last_name
#         self.age = age
#         self.phone = phone
#
#
#     def birthday(self):
#         self._age += 1
#     def full_name(self):
#         return f'{self.last_name} {self.first_name} {self.second_name}'
#     def person_age(self):
#         return  self.person_age()
#
#     p1 = Person("–ò–ª—å—è","–ü–µ—Ç—Ä–æ–≤–∏—á","–ò–≤–∞–Ω–æ–≤", 12445,32)
#     print(p1.person_age())
#     p1.birthday()
#     print(p1.person_age())
#     print(p1.full_name())
# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –°–æ—Ç—Ä—É–¥–Ω–∏–∫. üìå–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞—Å—Å–æ–º —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. üìå–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: ‚óã—à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä ‚óã—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –≤—ã—á–∏—Å–ª—è–µ–º—ã–π –∫–∞–∫ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —Å—É–º–º—ã —Ü–∏—Ñ—Ä id –Ω–∞ —Å–µ–º—å


#
class Animal:
    def __init__(self, name:str=None, breed:str='unknown', age: int = 0):
        self.name = name
        self.breed = breed
        self.age = age

    def print_specific(self):
        return f'–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ'

class Dog(Animal):
    def __init__(self, name:str=None, breed:str='unknown', commands: list[str] = 'unknown'):
        super().__init__(name, breed)
        # self.name = name
        # self.breed = breed
        self.commands = commands

    def print_specific(self):
        return f'{self.commands}'

class Fish(Animal):
    def __init__(self, name: str = None, breed: str = 'unknown', count_fins: int = 0):
        super().__init__(name, breed)
        # self.name = name
        # self.breed = breed
        self.count_fins = count_fins

    def print_specific(self):
        return f'{self.count_fins}'

class Bird(Animal):
    def __init__(self, name: str = None, breed: str = 'unknown', count_flights: int = 0):
        super().__init__(name, breed)
        # self.name = name
        # self.breed = breed
        self.count_flights = count_flights

    def print_specific(self):
        return f'{self.count_flights}'




if __name__ == '__main__':
    dog = Dog('Kat', 'Husky', ['–ì–æ–ª–æ—Å', '–°–∏–¥–µ—Ç—å'])
    fish = Fish('Nemo', 'Gold Fish', 3)
    bird = Bird('Kesha', '–ü–æ–ø—É–≥–∞–π', 2)
    animal = Animal('Lexa', 'Cat', 12)
    print(animal.print_specific())
    print(dog.print_specific())
    print(fish.print_specific())
    print(bird.print_specific())

